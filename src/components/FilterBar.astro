---
import "../styles/filterBar.css";
---

<div class="filter-bar">
    <h1>Filter section</h1>
    <div class="price-filter-content">
        <h4>Price, Euro</h4>
        <form action="" class="price-filter">
            <input type="text" class="price-input-min" />
            <span>-</span>
            <input type="text" class="price-input-max" />
            <button class="price-button">Search</button>
        </form>
        <div class="price-slider">
            <div class="custom-slider">
                <div class="price-progress"></div>
            </div>
            <input
                type="range"
                name="min_value"
                class="min_value"
                min="1000"
                max="12000"
                value="1500"
            />
            <input
                type="range"
                name="max_value"
                class="max_value"
                min="1000"
                max="12000"
                value="3000"
            />
        </div>
    </div>
    <div class="auction-type-filter-content">
        <h4>Auction Type</h4>
        <form action="" class="auction-type-filter">
            <input
                type="checkbox"
                id="upcomingAuctions"
                class="upcoming-auctions-checkbox"
            />
            <label for="upcomingAuctions">Upcoming auctions</label><br />
            <input
                type="checkbox"
                id="liveAuction"
                class="live-auctions-checkbox"
            />
            <label for="liveAuctions">Live auctions</label>
        </form>
    </div>
</div>
<script>
    // get elements from html document
    const progress = document.querySelector(".price-progress") as HTMLDivElement | null;
    const min_input = document.querySelector(".min_value") as HTMLInputElement;
    const max_input = document.querySelector(".max_value") as HTMLInputElement;
    const price_input_min = document.querySelector(".price-input-min") as HTMLInputElement;
    const price_input_max = document.querySelector(".price-input-max") as HTMLInputElement;
    const price_button = document.querySelector(".price-button") as HTMLInputElement;

    const updateProgress = () => {
        // Finds the difference between absolute max and min price
        const range = parseInt(max_input.max) - parseInt(min_input.min);
        // Finds the difference between selected min and max values
        const currentRange =
            parseInt(max_input.value) - parseInt(min_input.value);
        // Finds the width in percents
        const width = (currentRange / range) * 100;
        // Calculate distance between absolute min and selected min value in percents
        const minOffset =
            ((parseInt(min_input.value) - parseInt(min_input.min)) / range) *
            100;
        if (progress) {
            progress.style.width = width + "%"; // Set the width for div with class progress
            progress.style.left = minOffset + "%"; // Set left offset for div with class progress
        }
    };
    const updateInputFields = () => {
        if (price_input_min) price_input_min.value = min_input.value; // Set the min value from slider to the min price input field
        if (price_input_max) price_input_max.value = max_input.value; // Set the max value from slider to the max price input field
    };

    min_input?.addEventListener("input", () => {
        // if slider min value becomes bigger than max value
        if (parseInt(min_input.value) >= parseInt(max_input.value)) {
            max_input.value = min_input.value; // make max value the same as min value
        }
        updateProgress(); // update price progress bar
        updateInputFields(); // update values in price input fields
    });
    max_input.addEventListener("input", () => {
        // if slider max value becomes lower than min value
        if (parseInt(max_input.value) <= parseInt(min_input.value)) {
            min_input.value = max_input.value; // make min value the same as max value
        }
        updateProgress(); // update price progress bar
        updateInputFields(); // update values in price input fields
    });
    updateProgress(); // update price progress bar
    updateInputFields(); // update values in price input fields

    // Handle focus on min price input
    price_input_min.addEventListener("focus", () => {
        price_input_min.classList.add("price-input-focused");

        const minValue = parseInt(price_input_min.value);
        const minLimit = parseInt(min_input.min);
        const maxLimit = parseInt(max_input.max);

        // Add warning class if value is out of allowed range
        if (minValue < minLimit || minValue > maxLimit) {
            price_input_min.classList.add("price-input-exceeding-value");
        } else {
            price_input_min.classList.add("price-input-focused");
        }
    });

    // Handle blur on min price input
    price_input_min.addEventListener("blur", () => {
        price_input_min.classList.remove(
            "price-input-focused",
            "price-input-exceeding-value",
        );
        price_input_min.classList.add("price-input-min");
    });

    // Handle focus on max price input
    price_input_max.addEventListener("focus", () => {
        const maxValue = parseInt(price_input_max.value);
        const minLimit = parseInt(min_input.min);
        const maxLimit = parseInt(max_input.max);

        // Add appropriate class based on validity
        if (maxValue < minLimit || maxValue > maxLimit) {
            price_input_max.classList.add("price-input-exceeding-value");
        } else {
            price_input_max.classList.add("price-input-focused");
        }
    });

    // Handle blur on max price input
    price_input_max.addEventListener("blur", () => {
        price_input_max.classList.remove(
            "price-input-focused",
            "price-input-exceeding-value",
        );
        price_input_max.classList.add("price-input-max");
    });

    // Restrict max input to digits only and validate value
    price_input_max.addEventListener("input", () => {
        price_input_max.value = price_input_max.value.replace(/[^0-9]/g, "");

        const maxValue = parseInt(price_input_max.value);
        const minLimit = parseInt(min_input.min);
        const maxLimit = parseInt(max_input.max);

        if (maxValue < minLimit || maxValue > maxLimit) {
            price_input_max.classList.add("price-input-exceeding-value");
            price_button?.classList.add("price-button-disabled");
            price_button.disabled = true;
        } else {
            price_input_max.classList.remove("price-input-exceeding-value");
            price_button?.classList.remove("price-button-disabled");
            price_button.disabled = false;
            price_input_max.classList.add("price-input-focused");
        }
    });

    // Restrict min input to digits only and validate value
    price_input_min.addEventListener("input", () => {
        price_input_min.value = price_input_min.value.replace(/[^0-9]/g, "");

        const minValue = parseInt(price_input_min.value);
        const minLimit = parseInt(min_input.min);
        const maxLimit = parseInt(max_input.max);

        if (minValue < minLimit || minValue > maxLimit) {
            price_input_min.classList.add("price-input-exceeding-value");
            price_button?.classList.add("price-button-disabled");
            price_button.disabled = true;
        } else {
            price_input_min.classList.remove("price-input-exceeding-value");
            price_button?.classList.remove("price-button-disabled");
            price_button.disabled = false;
            price_input_min.classList.add("price-input-focused");
        }
    });
</script>
