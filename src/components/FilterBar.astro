---
import "../styles/global.css"
import "../styles/filterBar.css";
import { cars } from "../data/cars.js";
---

<div class="filter-bar">
    <form class="filter_form">
        <fieldset class="filter_range">
            <legend class="filter_subtitle" >Price</legend>
                <label>
                    <input id="price-from" class="filter_input" type="number" placeholder="from"/>
                </label>

            <span>-</span>

            <label>
                <input id="price-to" class="filter_input" type="number" placeholder="to" />
            </label>
        </fieldset>

        <fieldset class="filter_range">
            <legend class="filter_subtitle" >Run</legend>
            <label>
                <input id="run-from" class="filter_input" type="number" placeholder="from"/>
            </label>

            <span>-</span>

            <label>
                <input id="run-to" class="filter_input" type="number" placeholder="to" />
            </label>
        </fieldset>

        <fieldset class="filter_choice">
            <legend class="filter_subtitle" >Wheel placement</legend>
            <label class="filter_label">
                <input id="wheel-left" class="filter_input" type="checkbox" value="Left Hand Drive"/>
                <span>Left hand</span>
            </label>

            <label class="filter_label">
                <input id="wheel-right" class="filter_input" type="checkbox" value="Right Hand Drive"/>
                <span>Right hand</span>
            </label>

        </fieldset>

        <fieldset class="filter_choice">
            <legend class="filter_subtitle">Origin</legend>
            <label class="filter_label" >
                <input id="origin-germany" class="filter_input" type="checkbox" value="Germany"/>
                <span>Germany</span>
            </label>

            <label class="filter_label">
                <input id="origin-uk" class="filter_input" type="checkbox" value="UK"/>
                <span>UK</span>
            </label>

        </fieldset>

        <button id="filter-button" class="filter_button" type="button">Apply filters</button>
    </form>
</div>

<script is:inline define:vars={{ cars }}>
    // Make a copy of the cars data for client-side use
    const carsData = cars ;

    // Get filter elements
    const filterButton = document.getElementById('filter-button');
    const priceFromInput = document.getElementById('price-from');
    const priceToInput = document.getElementById('price-to');
    const runFromInput = document.getElementById('run-from');
    const runToInput = document.getElementById('run-to');
    const wheelLeftCheckbox = document.getElementById('wheel-left');
    const wheelRightCheckbox = document.getElementById('wheel-right');

    // Get all origin checkboxes
    const originCheckboxes = document.querySelectorAll('input[id^="origin-"]');

    // Add event listener to the filter button
    filterButton.addEventListener('click', () => {
        // Get filter values
        const priceFrom = priceFromInput.value ? parseInt(priceFromInput.value) : 0;
        const priceTo = priceToInput.value ? parseInt(priceToInput.value) : Number.MAX_SAFE_INTEGER;
        const runFrom = runFromInput.value ? parseInt(runFromInput.value) : 0;
        const runTo = runToInput.value ? parseInt(runToInput.value) : Number.MAX_SAFE_INTEGER;
        const wheelLeft = wheelLeftCheckbox.checked;
        const wheelRight = wheelRightCheckbox.checked;

        // Get selected origins by reading values from checked checkboxes
        const selectedOrigins = [];
        originCheckboxes.forEach(checkbox => {
            if (checkbox.checked && checkbox.value) {
                selectedOrigins.push(checkbox.value);
            }
        });

        // Filter the cars data
        const filteredCars = carsData.filter(car => {
            // Filter by price
            if (car.price < priceFrom || car.price > priceTo) {
                return false;
            }

            // Filter by run (need to convert from string like "50,000 km" to number)
            const runValue = parseInt(car.run.replace(/,/g, ''));
            if (runValue < runFrom || runValue > runTo) {
                return false;
            }

            // Filter by wheel placement
            if ((wheelLeft || wheelRight) &&
                (!wheelLeft || car.wheel !== 'Left Hand Drive') &&
                (!wheelRight || car.wheel !== 'Right Hand Drive')) {
                return false;
            }

            // Filter by origin - if any origins are selected, check if car's origin is in the array
            if (selectedOrigins.length > 0) {
                // If car's origin is in the selectedOrigins array, keep it; otherwise, filter it out
                if (!selectedOrigins.includes(car.origin)) {
                    return false;
                }
            }

            return true;
        });

        // Log the filtered results to the console
        console.log('Filtered Cars:', filteredCars);
    });
</script>
